---
import { ViewTransitions } from "astro:transitions";
import "@/global.scss";

interface Props {
	title?: string;
	description?: string;
	ogType?: string;
	ogImage?: string;
	notFound?: boolean;
	canonical?: string;
	publishedAt?: string | undefined;
	jsonld?: unknown[];
}

const path = Astro.url.pathname.replace(/^\//, "").replace(/\.html$/, "");

const {
	title,
	description = "配信用のシンプルな立ち絵を表示できるサービスです。あなたの声に合わせて立ち絵を切り替えることができます。",
	ogType = "website",
	ogImage = `${Astro.site}default-ogp.png`,
	notFound = false,
	canonical = `${Astro.site}${path}`,
	jsonld = []
} = Astro.props;

const serviceTitle = "SimpleV";
const pageTitle = title === undefined ? serviceTitle : `${title}｜${serviceTitle}`;

const schema = [
	{
		"@context": "https://schema.org",
		"@type": "WebSite",
		name: serviceTitle,
		alternateName: serviceTitle,
		description,
		url: String(Astro.site),
		publisher: {
			"@type": "Organization",
			name: serviceTitle,
			url: String(Astro.site),
			logo: {
				"@type": "ImageObject",
				url: `${Astro.site}default-ogp.png`,
				width: 512,
				height: 512
			}
		},
		image: {
			"@type": "ImageObject",
			url: `${Astro.site}default-ogp.png`,
			width: 512,
			height: 512
		}
	},
	...jsonld
];
---

<html lang="ja">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="viewport" content="width=device-width" />
		<meta name="description" content={description} />
		<meta name="format-detection" content="email=no,telephone=no,address=no" />
		<meta name="author" content="彩季" />
		<meta name="generator" content={Astro.generator} />
		<meta property="og:url" content={`${Astro.site}${path}`} />
		<meta property="og:type" content={ogType} />
		<meta property="og:title" content={title ?? serviceTitle} />
		<meta property="og:description" content={description} />
		<meta property="og:site_name" content={serviceTitle} />
		<meta property="og:image" content={ogImage} />
		<meta name="twitter:card" content="summary" />
		<meta name="twitter:site" content="@Akime_Aki" />
		<meta name="twitter:title" content={title ?? serviceTitle} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={ogImage} />
		<!-- Google Tag Manager -->
		<script is:inline>
			// prettier-ignore
			(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			// eslint-disable-next-line no-var
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-TX2D4SM9');
		</script>
		<!-- End Google Tag Manager -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+JP:wght@100;200;300;400;500;600;700&display=swap"
			rel="stylesheet"
		/>
		{notFound && <meta name="robots" content="noindex" />}
		<link rel="icon" href={`${Astro.site}favicon.ico`} />
		<link rel="sitemap" href={`${Astro.site}sitemap-index.xml`} />
		{
			schema.map((item) => {
				return <script type="application/ld+json" is:inline set:html={JSON.stringify(item)} />;
			})
		}
		<title>{pageTitle}</title>
		{!notFound && <link data-pagefind-meta="url[href]" rel="canonical" href={canonical} />}
		<link rel="manifest" href="/manifest.json" />
		<ViewTransitions />
	</head>
	<body>
		<!-- Google Tag Manager (noscript) -->
		<noscript>
			<iframe
				src="https://www.googletagmanager.com/ns.html?id=GTM-TX2D4SM9"
				height="0"
				width="0"
				style="display:none;visibility:hidden"></iframe>
		</noscript>
		<!-- End Google Tag Manager (noscript) -->
		<slot />
		<script>
			const toggleOnContextMenu = () => {
				const contextMenus = document.querySelectorAll(".context-menu");

				if (contextMenus.length === 0) {
					document.body.removeAttribute("oncontextmenu");
				} else {
					document.body.setAttribute("oncontextmenu", "return false;");
				}
			};

			toggleOnContextMenu();

			document.addEventListener("astro:after-swap", toggleOnContextMenu);
		</script>

		<script>
			const resetGtm = () => {
				console.log("reset");
				window.dataLayer.push(function () {
					// eslint-disable-next-line @typescript-eslint/ban-ts-comment
					// @ts-expect-error
					this.reset();
				});
			};

			document.addEventListener("astro:after-swap", resetGtm);
		</script>
	</body>
</html>
