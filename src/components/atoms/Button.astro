---
interface Props {
	id?: string;
	href?: string;
	disabled?: boolean;
}

const { id, href, disabled = false } = Astro.props;
---

{
	href === undefined ? (
		<button id={id} class="button" data-disabled={disabled} data-gtm-click="normal-button">
			<slot />
		</button>
	) : (
		<a href={href} id={id} class="button" data-disabled={disabled} data-gtm-click="normal-button">
			<slot />
		</a>
	)
}

<style lang="scss">
	.button {
		display: inline-block;
		cursor: pointer;
		padding: 15px 20px 13px;
		background-color: #5b4942;
		color: white;
		box-shadow: 0px 2px 5px 0px rgba(0, 0, 0, 0.35);
		border-radius: 10px;
		text-decoration: none;
		user-select: none;

		@media (hover: hover) {
			&:hover {
				background-color: #80675d;
			}
		}

		&[data-disabled] {
			background-color: #8f8f8f;
			cursor: not-allowed;
		}
	}
</style>

<script>
	const linkCheck = () => {
		const linkElement = document.querySelectorAll<HTMLAnchorElement>("a");
		linkElement.forEach((element) => {
			element.addEventListener("click", (event) => {
				if (element.dataset.disabled !== undefined) {
					event.preventDefault();
				}
			});
		});
	};

	linkCheck();
	document.addEventListener("astro:after-swap", linkCheck);
</script>
